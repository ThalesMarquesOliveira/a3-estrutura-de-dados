package estrutura; // define o pacote onde está esta classe

public class ListaEncadeada<E> implements Lista<E> { // implementa a interface Lista para elementos do tipo E

// classe interna estática que representa um nó da lista
private static class Node<E> {
    final E key;     // valor armazenado neste nó (imutável após criação)
    Node<E> next;    // referência para o próximo nó da lista

    Node(E key, Node<E> next) { // construtor do nó
        this.key = key;         // atribui o valor key ao campo key
        this.next = next;       // atribui o nó seguinte ao campo next
    }
}

private Node<E> head;    // referência para o primeiro nó da lista (início)
private Node<E> tail;    // referência para o último nó da lista (fim), usada para adicionar em O(1)
private int size;        // contador de elementos presentes na lista

public ListaEncadeada() {    // construtor da lista encadeada
    head = tail = null;       // inicia sem nós: head e tail apontam para null
    size = 0;                 // tamanho inicial zero
}

@Override
public boolean add(E e) {    // adiciona um elemento ao fim da lista
    Node<E> novo = new Node(e, null); // cria um novo nó com valor e e próximo null
    if (head == null) {       // se a lista estiver vazia
        head = novo;          // head passa a ser o novo nó
    } else {
        tail.next = novo;     // caso contrário, liga o último nó (tail) ao novo
    }
    tail = novo;              // atualiza tail para o novo nó
    size++;                   // incrementa o tamanho da lista
    return true;              // sempre retorna true (sucesso)
}

@Override
public boolean contains(E e) { // verifica se a lista contém o elemento e
    for (Node<E> n = head; n != null; n = n.next) { // percorre todos os nós
        // compara cuidadosamente nulls e objetos usando equals
        if ((e == null && n.key == null) ||
            (e != null && e.equals(n.key))) {
            return true;      // encontrou o elemento
        }
    }
    return false;             // não encontrou
}

@Override
public boolean remove(E e) {  // remove a primeira ocorrência de e na lista
    Node<E> prev = null;      // nó anterior ao que está sendo examinado
    Node<E> curr = head;      // nó atual em análise

    while (curr != null) {     // percorre até o fim
        // verifica se curr.key é igual a e (tratando null)
        if ((e == null && curr.key == null) ||
            (e != null && e.equals(curr.key))) {
            if (prev == null) {        // se for o primeiro nó (head)
                head = curr.next;      // atualiza head para o próximo
            } else {
                prev.next = curr.next; // senão, "pula" o curr, ligando prev ao next
            }
            if (curr == tail) {        // se for o último nó (tail)
                tail = prev;           // atualiza tail para o nó anterior
            }
            size--;                   // decrementa o tamanho
            return true;              // remoção bem-sucedida
        }
        prev = curr;   // avança prev
        curr = curr.next; // avança curr
    }
    return false;        // não encontrou o elemento para remover
}

@Override
public int size() {     // retorna a quantidade de elementos na lista
    return size;        // devolve o campo size
}

@Override
public void clear() {   // remove todos os elementos da lista
    head = tail = null;  // desconecta os nós para que sejam recolhidos pelo GC
    size = 0;            // zera o contador de tamanho
}
}
